package co.a123.mediacion.gcm;

import java.sql.SQLException;

import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.PacketExtension;
import org.jivesoftware.smack.provider.PacketExtensionProvider;
import org.jivesoftware.smack.provider.ProviderManager;
import org.xmlpull.v1.XmlPullParser;

import com.antoinecampbell.gcmserver.SmackCcsClient;
import com.antoinecampbell.gcmserver.model.NotificationKey;
import com.antoinecampbell.gcmserver.model.User;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;

import co.a123.mediacion.util.Constant;


/**
 * Smack client implementation for GCM Cloud Connection Server.
 * 
 */
public class GoogleConnectionManager {

	private static GoogleConnectionManager instance = null;
	final StringBuilder userName = new StringBuilder(Constant.GCM_SENDER_ID).append("@").append(Constant.GCM_SERVER);;
	final String password = Constant.GCM_SERVER_KEY;

	
	private GoogleConnectionManager(){

		ProviderManager.getInstance().addExtensionProvider(Constant.GCM_ELEMENT_NAME, Constant.GCM_NAMESPACE,
			new PacketExtensionProvider()
			{

			    @Override
			    public PacketExtension parseExtension(XmlPullParser parser) throws Exception
			    {
				String json = parser.nextText();
				PacketExtension packet = new co.a123.mediacion.gcm.PacketExtension(json);
				return packet;
			    }
			});
	}
	
	public boolean connect(){
		
		boolean isConnect = false;
		SmackCcsClient ccsClient = new SmackCcsClient();

		try
		{
		    // Setup CCS client and create local SQLite database and tables if needed
		    ccsClient.getGcmConnection().connect(userName, password);
		    isConnect = true;
		}
		catch (XMPPException e)
		{
			isConnect = false;
		    e.printStackTrace();
		}
		
		return isConnect;
	}
	
	public boolean disconnect(){
		return true;
	}
	
	public static GoogleConnectionManager getInstance(){
		if(instance == null){
			instance = new GoogleConnectionManager();
		}
		return instance;
	}
}
