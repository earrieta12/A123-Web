package co.a123.mediacion.gcm;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.net.ssl.SSLSocketFactory;

import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.ConnectionConfiguration.SecurityMode;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.PacketTypeFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.json.simple.JSONValue;

import co.a123.mediacion.events.EventManager;
import co.a123.mediacion.util.Constant;

public class GCMConnection {

	ConnectionConfiguration config;
	XMPPConnection connection;
	private static GCMConnection connectionInstance = null;
	Logger logger;
	
	private GCMConnection(){
		
	}
	
	public static GCMConnection getInstance(){
		if(connectionInstance != null){
			connectionInstance = new GCMConnection();
		}
		return connectionInstance;
	}
	
	/**
	 * Connects to GCM Cloud Connection Server using the supplied credentials.
	 * 
	 * @param username GCM_SENDER_ID@gcm.googleapis.com
	 * @param password API Key
	 * @throws XMPPException
	 */
	public void connect(String username, String password) throws XMPPException {
		config = new ConnectionConfiguration(Constant.GCM_SERVER,Constant.GCM_PORT);
		config.setSecurityMode(SecurityMode.enabled);
		config.setReconnectionAllowed(true);
		config.setRosterLoadedAtLogin(false);
		config.setSendPresence(false);
		config.setSocketFactory(SSLSocketFactory.getDefault());

		config.setDebuggerEnabled(false);
		// -Dsmack.debugEnabled=true
		XMPPConnection.DEBUG_ENABLED = false;

		connection = new XMPPConnection(config);
		connection.connect();

		connection.addConnectionListener(EventManager.CONNECTION_LISTENER);
		
		connection.addPacketListener(EventManager.PACKET_LISTENER, new PacketTypeFilter(Message.class));

		connection.addPacketInterceptor(EventManager.PACKET_INTERCEPTOR, new PacketTypeFilter(Message.class));

		connection.login(username, password);

	}
	
	public boolean disconnect(){
		
		boolean disconnect = false;
		if(connection != null){
			connection.disconnect();
			disconnect = true;
		}
		return disconnect;
	}

	
	
    /**
     * Creates a JSON encoded ACK message for an upstream message received from
     * an application.
     * 
     * @param to
     *            RegistrationId of the device who sent the upstream message.
     * @param messageId
     *            messageId of the upstream message to be acknowledged to CCS.
     * @return JSON encoded ack.
     */
    public static String createJsonAck(String to, String messageId)
    {
	Map<String, Object> message = new HashMap<String, Object>();
	message.put("message_type", "ack");
	message.put("to", to);
	message.put("message_id", messageId);
	return JSONValue.toJSONString(message);
    }



    /**
     * Handles an ACK.
     * 
     * <p>
     * By default, it only logs a INFO message, but subclasses could override it
     * to properly handle ACKS.
     */
    public void handleAckReceipt(Map<String, Object> jsonObject)
    {
	String messageId = jsonObject.get("message_id").toString();
	String from = jsonObject.get("from").toString();
	logger.log(Level.INFO, "handleAckReceipt() from: " + from + ", messageId: " + messageId);
    }



    /**
     * Handles a NACK.
     * 
     * <p>
     * By default, it only logs a INFO message, but subclasses could override it
     * to properly handle NACKS.
     */
    public void handleNackReceipt(Map<String, Object> jsonObject)
    {
	String messageId = jsonObject.get("message_id").toString();
	String from = jsonObject.get("from").toString();
	logger.log(Level.INFO, "handleNackReceipt() from: " + from + ", messageId: " + messageId);
    }



    /**
     * Sends a downstream GCM message.
     */
    public void send(String jsonRequest)
    {
	Packet request = new PacketExtension(jsonRequest).toPacket();
	connection.sendPacket(request);
    }
    
    

    /**
     * Creates a JSON encoded GCM message.
     * 
     * @param to
     *            RegistrationId of the target device (Required).
     * @param messageId
     *            Unique messageId for which CCS will send an "ack/nack"
     *            (Required).
     * @param payload
     *            Message content intended for the application. (Optional).
     * @param collapseKey
     *            GCM collapse_key parameter (Optional).
     * @param timeToLive
     *            GCM time_to_live parameter (Optional).
     * @param delayWhileIdle
     *            GCM delay_while_idle parameter (Optional).
     * @return JSON encoded GCM message.
     */
    public static String createJsonMessage(String to, String messageId, Map<String, String> payload,
	    String collapseKey, Long timeToLive, Boolean delayWhileIdle)
    {
	Map<String, Object> message = new HashMap<String, Object>();
	message.put("to", to);
	if (collapseKey != null)
	{
	    message.put("collapse_key", collapseKey);
	}
	if (timeToLive != null)
	{
	    message.put("time_to_live", timeToLive);
	}
	if (delayWhileIdle != null && delayWhileIdle)
	{
	    message.put("delay_while_idle", true);
	}
	message.put("message_id", messageId);
	message.put("data", payload);
	return JSONValue.toJSONString(message);
    }
    
}
