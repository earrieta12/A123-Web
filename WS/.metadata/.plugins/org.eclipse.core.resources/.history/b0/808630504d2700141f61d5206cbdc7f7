package co.a123.mediacion.gcm;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.net.ssl.SSLSocketFactory;

import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.ConnectionConfiguration.SecurityMode;
import org.jivesoftware.smack.ConnectionListener;
import org.jivesoftware.smack.PacketInterceptor;
import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.PacketTypeFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.json.simple.JSONValue;
import org.json.simple.parser.ParseException;

import co.a123.mediacion.util.Constant;
import co.a123.mediacion.util.Generator;

public class GCMConnection {

	ConnectionConfiguration config;
	XMPPConnection connection;
	private static GCMConnection connectionInstance = null;
	Logger logger;
	
	private GCMConnection(){
		
	}
	
	public static GCMConnection getInstance(){
		if(connectionInstance != null){
			connectionInstance = new GCMConnection();
		}
		return connectionInstance;
	}
	
	/**
	 * Connects to GCM Cloud Connection Server using the supplied credentials.
	 * 
	 * @param username GCM_SENDER_ID@gcm.googleapis.com
	 * @param password API Key
	 * @throws XMPPException
	 */
	public boolean connect(String username, String password) throws XMPPException {
		config = new ConnectionConfiguration(Constant.GCM_SERVER,Constant.GCM_PORT);
		config.setSecurityMode(SecurityMode.enabled);
		config.setReconnectionAllowed(true);
		config.setRosterLoadedAtLogin(false);
		config.setSendPresence(false);
		config.setSocketFactory(SSLSocketFactory.getDefault());

		config.setDebuggerEnabled(false);
		// -Dsmack.debugEnabled=true
		XMPPConnection.DEBUG_ENABLED = false;

		connection = new XMPPConnection(config);
		connection.connect();

		connection.addConnectionListener(connectionListener);

		// Handle incoming packets
		connection.addPacketListener(new PacketListener() {

			@Override
			public void processPacket(Packet packet) {
				logger.log(Level.INFO, "Received: " + packet.toXML());
				Message incomingMessage = (Message) packet;
				PacketExtension gcmPacket = (PacketExtension) incomingMessage.getExtension(Constant.GCM_NAMESPACE);
				String json = gcmPacket.getJson();
				try {
					@SuppressWarnings("unchecked")
					Map<String, Object> jsonObject = (Map<String, Object>) JSONValue.parseWithException(json);

					// present for "ack"/"nack", null otherwise
					Object messageType = jsonObject.get("message_type");

					if (messageType == null) {
						// Normal upstream data message
						handleIncomingDataMessage(jsonObject);

						// Send ACK to CCS
						String messageId = jsonObject.get("message_id").toString();
						String from = jsonObject.get("from").toString();
						String ack = createJsonAck(from, messageId);
						send(ack);
					} else if ("ack".equals(messageType.toString())) {
						// Process Ack
						handleAckReceipt(jsonObject);
					} else if ("nack".equals(messageType.toString())) {
						// Process Nack
						handleNackReceipt(jsonObject);
					} else {
						logger.log(Level.WARNING,"Unrecognized message type (%s)",messageType.toString());
					}
				} catch (ParseException e) {
					logger.log(Level.SEVERE, "Error parsing JSON " + json, e);
				} catch (Exception e) {
					logger.log(Level.SEVERE, "Couldn't send echo.", e);
				}
			}
		}, new PacketTypeFilter(Message.class));

		// Log all outgoing packets
		connection.addPacketInterceptor(new PacketInterceptor() {
			@Override
			public void interceptPacket(Packet packet) {
				logger.log(Level.INFO, "Sent: {0}", packet.toXML());
			}
		}, new PacketTypeFilter(Message.class));

		connection.login(username, password);
		return true;
	}
	
	public boolean disconnect(){
		return true;
	}

	/**
	 * Handles an upstream data message from a device application.
	 * 
	 * <p>
	 * This sample echo server sends an echo message back to the device.
	 * Subclasses should override this method to process an upstream message.
	 */
	public void handleIncomingDataMessage(Map<String, Object> jsonObject) {
		@SuppressWarnings("unchecked")
		Map<String, String> payload = (Map<String, String>) jsonObject.get("data");

		String from = jsonObject.get("from").toString();
		// PackageName of the application that sent this message.
		String category = jsonObject.get("category").toString();
		logger.log(Level.INFO, "Application: " + category);

		String action = payload.get("action");
		if (action.equalsIgnoreCase("com.antoinecampbell.gcmdemo.REGISTER")) {
			String name = payload.get("name").toString();
			
			//addUser(name, from);
			// Send an REGISTER response back
			payload.put("message", "Registration successful");
			String echo = createJsonMessage(from, Generator.getRandomMessageId(),payload, null, null, false);
			send(echo);
			logger.info("Adding new user: " + name + ":" + from);
		} else if (action.equalsIgnoreCase("com.antoinecampbell.gcmdemo.UNREGISTER")) {
			logger.info("Removing ID: " + from);
		} else if (action.equalsIgnoreCase("com.antoinecampbell.gcmdemo.ECHO")) {
			// Send an ECHO response back
			String echo = createJsonMessage(from, Generator.getRandomMessageId(),payload, null, null, false);
			send(echo);
		} else if (action.equalsIgnoreCase("com.antoinecampbell.gcmdemo.BROADCAST")) {
			// Send an Broadcast response back
		} else if (action.equalsIgnoreCase("com.antoinecampbell.gcmdemo.NOTIFICATION")) {
			// Send a Notification response back			
		} else {
			logger.warning("Unkown action sent: " + action);
		}
	}

	
    /**
     * Creates a JSON encoded ACK message for an upstream message received from
     * an application.
     * 
     * @param to
     *            RegistrationId of the device who sent the upstream message.
     * @param messageId
     *            messageId of the upstream message to be acknowledged to CCS.
     * @return JSON encoded ack.
     */
    public static String createJsonAck(String to, String messageId)
    {
	Map<String, Object> message = new HashMap<String, Object>();
	message.put("message_type", "ack");
	message.put("to", to);
	message.put("message_id", messageId);
	return JSONValue.toJSONString(message);
    }



    /**
     * Handles an ACK.
     * 
     * <p>
     * By default, it only logs a INFO message, but subclasses could override it
     * to properly handle ACKS.
     */
    public void handleAckReceipt(Map<String, Object> jsonObject)
    {
	String messageId = jsonObject.get("message_id").toString();
	String from = jsonObject.get("from").toString();
	logger.log(Level.INFO, "handleAckReceipt() from: " + from + ", messageId: " + messageId);
    }



    /**
     * Handles a NACK.
     * 
     * <p>
     * By default, it only logs a INFO message, but subclasses could override it
     * to properly handle NACKS.
     */
    public void handleNackReceipt(Map<String, Object> jsonObject)
    {
	String messageId = jsonObject.get("message_id").toString();
	String from = jsonObject.get("from").toString();
	logger.log(Level.INFO, "handleNackReceipt() from: " + from + ", messageId: " + messageId);
    }



    /**
     * Sends a downstream GCM message.
     */
    public void send(String jsonRequest)
    {
	Packet request = new PacketExtension(jsonRequest).toPacket();
	connection.sendPacket(request);
    }
    
    

    /**
     * Creates a JSON encoded GCM message.
     * 
     * @param to
     *            RegistrationId of the target device (Required).
     * @param messageId
     *            Unique messageId for which CCS will send an "ack/nack"
     *            (Required).
     * @param payload
     *            Message content intended for the application. (Optional).
     * @param collapseKey
     *            GCM collapse_key parameter (Optional).
     * @param timeToLive
     *            GCM time_to_live parameter (Optional).
     * @param delayWhileIdle
     *            GCM delay_while_idle parameter (Optional).
     * @return JSON encoded GCM message.
     */
    public static String createJsonMessage(String to, String messageId, Map<String, String> payload,
	    String collapseKey, Long timeToLive, Boolean delayWhileIdle)
    {
	Map<String, Object> message = new HashMap<String, Object>();
	message.put("to", to);
	if (collapseKey != null)
	{
	    message.put("collapse_key", collapseKey);
	}
	if (timeToLive != null)
	{
	    message.put("time_to_live", timeToLive);
	}
	if (delayWhileIdle != null && delayWhileIdle)
	{
	    message.put("delay_while_idle", true);
	}
	message.put("message_id", messageId);
	message.put("data", payload);
	return JSONValue.toJSONString(message);
    }
    
    private ConnectionListener connectionListener = new ConnectionListener() {

		@Override
		public void reconnectionSuccessful() {
			logger.info("Reconnecting..");
		}

		@Override
		public void reconnectionFailed(Exception e) {
			logger.log(Level.INFO, "Reconnection failed.. ", e);
		}

		@Override
		public void reconnectingIn(int seconds) {
			logger.log(Level.INFO, "Reconnecting in %d secs", seconds);
		}

		@Override
		public void connectionClosedOnError(Exception e) {
			logger.log(Level.INFO, "Connection closed on error.");
		}

		@Override
		public void connectionClosed() {
			logger.info("Connection closed.");
		}
	}; 
}
